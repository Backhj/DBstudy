--EXISTS 존재하는지 체크
-- EXISTS 서브쿼리에 테이블에 검색조건의 데이터가 존재하면 존재하는 데이터에 대해서 메인쿼리에서 조회
SELECT a.department_id
     , a.department_name
FROM departments a
WHERE EXISTS (SELECT *
              FROM job_history b
              WHERE b.department_id = a.department_id);
--수강이력이 없는 학생을 조회하시오
SELECT* 
FROM 학생 a 
WHERE NOT EXISTS (SELECT *
                  FROM 수강내역
                  WHERE 학번 = a.학번);
--테이블 복사
CREATE TABLE emp_temp AS
SELECT *
FROM employees;
--UPDATE 문 중첩쿼리시 사용   
--전 사원의 급여를 평균 금액으로 갱신
UPDATE emp_temp
SET salary = (SELECT AVG(salary)
              FROM emp_temp);

ROLLBACK ;
SELECT *
FROM emp_temp;
--평균 급여보다 많이 받는 사원 삭제
DELETE emp_temp
WHERE salary >= (SELECT AVG(salary)
                  FROM emp_temp);

--미국국립표준협회 ANSI, American National Standards Institute
--FROM 절에 조인조건이 들어감
--inner join(equi-join)을 표준 ANSI JOIN 방법으로
SELECT a.학번
     , a.이름
     , b.수강내역번호
FROM 학생 a
INNER JOIN 수강내역 b
ON(a.학번 = b.학번);

--과목 테이블 추가 INNER JOIN
SELECT a.학번
     , a.이름
     , b.수강내역번호
FROM 학생 a
INNER JOIN 수강내역 b
ON(a.학번 = b.학번)
INNER JOIN 과목 c
ON(b.과목번호 = c.과목번호);

SELECT 학번
     , a.이름
     , b.수강내역번호
     , c.과목이름
FROM 학생 a
INNER JOIN 수강내역 b
USING(학번) -- 조인하는 컬럼명이 같을때 USING 사용가능 BUT select에도
INNER JOIN 과목 c -- 테이블 명 or 테이블 별칭이 들어가면 안됨.
USING(과목번호);
-- ANSI OUTER JOIN
-- LEFT OUTER JOIN or RIGHT OUTER JOIN
SELECT *
FROM 학생 a
    ,수강내역 b
WHERE a.학번 = b.학번(+); --일반 outer join

SELECT *
FROM 학생 a
LEFT OUTER JOIN
수강내역 b
ON(a.학번 = b.학번);

SELECT *
FROM 수강내역 b
RIGHT OUTER JOIN
학생 a
ON(a.학번 = b.학번); --위에 결과와 같음

--매년 국가지역(Amerias, Asia)의 총판매금액을 출력하시오
--sales, customers, countries 테이블 사용
-- 국가는 country_region, 판매금액은 amount_sold
--일반 join 사용 or ANSI join 사용 (국가 정렬) 

-------------------------------------------------------------------

SELECT (select emp_name
        from employees
        where employee_id = a.employee_id) as 이름
       ,a.employee_id as 사번
       ,to_char(판매금액,'999,999,999.99') as 판매금액
       ,a.판매수량
FROM (SELECT employee_id
            ,sum(amount_sold) as 판매금액
            ,sum(quantity_sold) as 판매수량
       FROM sales
       WHERE to_char(sales_date,'YYYY') = '2000'
       GROUP BY employee_id
       ORDER BY 2 DESC)a
WHERE rownum =1;
----------------------------------------------------------



